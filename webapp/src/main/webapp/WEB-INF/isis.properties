#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#  
#         http://www.apache.org/licenses/LICENSE-2.0
#         
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an
#  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#  KIND, either express or implied.  See the License for the
#  specific language governing permissions and limitations
#  under the License.


#################################################################################
#
# specify system components.
#
# The values correspond to the named components in the installer-registry.properties file
# in the org.apache.isis.runtimes.dflt:runtime JAR (in the org.apache.isis.runtimes.dflt.runtime package)
#
# Although all configuration could reside in isis.properties, the recommendation is
# to split out into component specific files:
# 
#    xxx_yyy.properties files
#
# where
#    * xxx is the component type, and
#    * yyy is the component name.
#
# For example, persistor_sql.properties holds configuration information specific to the
#
#
# If the components are changed, also remember to edit pom.xml (further comments can be 
# found in the persistor_xxx.properties files)
#
#################################################################################

#
# configure the persistor (object store) to use
#
# * in-memory   requires no additional configuration, but stores object in-memory.
#               Only suitable for prototyping
# * datanucleus uses JDO DataNucleus to persist objects to relational database.
#               for objectstore-specific properties, see persistor_datanucleus.properties   
# * fileserver  uses a simple FileServer to persist objects as JSON documents.  It requires the fileserver component to be running
#               for objectstore-specific properties, see persistor_fileserver.properties 
# * mongodb     uses MongoDB to be persist objects as JSON documents.  It requires MongoDB to be installed and running
#               for objectstore-specific properties, see persistor_fileserver.properties  
# * sql         uses an RDBMS to persist objects as table rows.  
#               for objectstore-specific properties, see persistor_sql.properties
# * xml         uses the XML ObjectStore to be persist objects to a set of XML files.  Only suitable for prototyping.
#               for objectstore-specific properties, see persistor_xml.properties 
#
# configuring this component automatically refines the metamodel (installing facet factories
# and meta model validators specific to the persistor)
#
# NOTE:
# * if using non-naive implementations of services, edit isis.services (below) and 
#   update the pom.xml to reference appropriate objstore-xxx module
# * for sql and datanucleus objectstores, update the pom.xml to reference appropriate JDBC driver
# 

#isis.persistor=in-memory
isis.persistor=datanucleus
#isis.persistor=fileserver
#isis.persistor=mongodb
#isis.persistor=sql
#isis.persistor=xml


#
# configure authentication mechanism to use (to logon to the system)
# note:
# - authentication is disabled if running in exploration mode
# - the Scimpi viewer allows access to anonymous users
# 
#isis.authentication=file
isis.authentication=org.apache.isis.security.shiro.authentication.ShiroAuthenticationManagerInstaller


#
# configure authorization mechanism to use

# The authorization mechanism define each users' permissions to view/edit object properties 
# or collections, and to view/invoke object actions
#
# configuring this component automatically refines the metamodel (installing a facet factory
# which vetoes access as required)
# 

#isis.authorization=file
#effectively disables
#isis.authorization=bypass
isis.authorization=org.apache.isis.security.shiro.authorization.ShiroAuthorizationManagerInstaller



#
# configure the user profile store to use.
# 
# the user profile store is supported by some viewers as a way to store 
# user-specific settings (eg colours, themes etc)
# 
isis.user-profile-store=in-memory




#
# additional programming model facets
#

#isis.reflector.facets.include=
#isis.reflector.facets.exclude=





#################################################################################
#
# Application Services and fixtures
#
#################################################################################

#
# Specify the domain services.
# 
# These are the most important configuration properties in the system, as they define
# the set of the classes for Isis to instantiate as domain service singletons.
# From these domain service instances the rest of the metamodel is discovered, while the 
# end-user gains access to other domain objects by invoking the actions of the domain services.
#
# The implementations depend on the configured (see isis.persistor above) 
#

# if using the in-memory or XML object stores:
#isis.services.prefix = org.estatio.
isis.services = org.estatio.dom.asset.FixedAssets, \
                org.estatio.dom.asset.Properties, \
                org.estatio.dom.lease.UnitsForLease, \
                org.estatio.dom.asset.FixedAssetRoles, \
                org.estatio.dom.agreement.Agreements, \
                org.estatio.dom.agreement.AgreementRoles, \
                org.estatio.dom.agreement.AgreementRoleCommunicationChannels, \
                org.estatio.dom.agreement.AgreementRoleCommunicationChannelTypes, \
                org.estatio.dom.agreement.AgreementTypes, \
                org.estatio.dom.agreement.AgreementRoleTypes, \
                org.estatio.dom.party.Parties, \
                org.estatio.dom.party.Persons, \
                org.estatio.dom.party.Organisations, \
                org.estatio.dom.financial.FinancialAccounts, \
                org.estatio.dom.lease.Leases, \
                org.estatio.dom.lease.LeaseItems, \
                org.estatio.dom.lease.LeaseTerms, \
                org.estatio.dom.lease.LeaseUnits, \
                org.estatio.dom.invoice.Invoices, \
                org.estatio.dom.lease.invoicing.InvoiceItemsForLease, \
                org.estatio.dom.lease.invoicing.InvoiceCalculationService,\
                org.estatio.dom.lease.contributed.LeaseTermContributedActions, \
                org.estatio.dom.communicationchannel.CommunicationChannels, \
                org.estatio.dom.communicationchannel.PostalAddresses, \
                org.estatio.dom.index.Indices, \
                org.estatio.dom.index.IndexBases, \
                org.estatio.dom.index.IndexValues, \
                org.estatio.dom.charge.Charges, \
                org.estatio.dom.charge.ChargeGroups, \
                org.estatio.dom.geography.Countries, \
                org.estatio.dom.geography.States, \
                org.estatio.dom.currency.Currencies, \
                org.estatio.dom.tax.Taxes, \
                org.estatio.dom.tax.TaxRates, \
                org.estatio.dom.tag.Tags, \
                org.estatio.dom.numerator.Numerators, \
                org.estatio.dom.financial.contributed.FinancialAccountContributedActions, \
                org.estatio.api.Api, \
                org.estatio.services.appsettings.EstatioSettingsServiceJdo,\
                org.estatio.services.appsettings.ApplicationSettingsServiceForEstatio,\
                org.estatio.services.audit.EstatioAuditService, \
                org.estatio.services.bookmarks.EstatioBookmarkService, \
                org.estatio.services.clock.ClockService, \
                org.estatio.services.exceprecog.ExceptionRecognizersForEstatio,\
                org.estatio.viewer.wicket.app.scheduler.EstatioSchedulerService, \
                org.estatio.viewer.wicket.app.administration.EstatioAdministrationService,\
                org.estatio.viewer.wicket.app.administration.DeveloperUtilities,\
                org.apache.isis.objectstore.jdo.service.RegisterEntities,\
                org.apache.isis.objectstore.jdo.applib.service.publish.PublishingServiceJdo,\
                org.apache.isis.objectstore.jdo.applib.service.settings.UserSettingsServiceJdo,\
                org.apache.isis.objectstore.jdo.applib.service.exceprecog.ExceptionRecognizerCompositeForJdoObjectStore,\
                org.apache.isis.objectstore.jdo.datanucleus.service.support.IsisJdoSupportImpl,\
                org.apache.isis.viewer.restfulobjects.rendering.eventserializer.RestfulObjectsSpecEventSerializer,\
                com.danhaywood.isis.wicket.gmap3.service.LocationLookupService

                #org.apache.isis.applib.services.publish.PublishingService$Stderr,\

#
# Specify the (optional) test fixtures
#
# Fixtures are used to seed the object store with an initial set of data.  For the 
# in-memory object store, the fixtures are installed on every run.  For other
# object stores, they are used only when the object store is first initialized.
#
isis.fixtures.prefix= org.estatio.fixture
isis.fixtures= EstatioFixture


#
# Publishing settings
#
org.apache.isis.viewer.restfulobjects.rendering.eventserializer.RestfulObjectsSpecEventSerializer.baseUrl=http://localhost:8080/restful/


################################################################################
#
# Viewer defaults
#
#################################################################################

#
# Specify viewer defaults
# 

isis.viewers.paged.standalone=30
isis.viewers.paged.parented=10

